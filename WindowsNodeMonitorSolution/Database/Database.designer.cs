#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiskLog.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NodeMonitor")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::LiskLog.Properties.Settings.Default.NodeMonitorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _Username;
		
		private System.Nullable<bool> _EnableMonitor;
		
		private string _Address;
		
		private string _Email;
		
		private System.Nullable<decimal> _Missedblocks;
		
		private System.Nullable<decimal> _Producedblocks;
		
		private System.Nullable<decimal> _Balance;
		
		private System.Nullable<decimal> _Productivity;
		
		private System.Nullable<int> _Rate;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private string _Enviroment;
		
		private EntitySet<Server> _Servers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEnableMonitorChanging(System.Nullable<bool> value);
    partial void OnEnableMonitorChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnMissedblocksChanging(System.Nullable<decimal> value);
    partial void OnMissedblocksChanged();
    partial void OnProducedblocksChanging(System.Nullable<decimal> value);
    partial void OnProducedblocksChanged();
    partial void OnBalanceChanging(System.Nullable<decimal> value);
    partial void OnBalanceChanged();
    partial void OnProductivityChanging(System.Nullable<decimal> value);
    partial void OnProductivityChanged();
    partial void OnRateChanging(System.Nullable<int> value);
    partial void OnRateChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnEnviromentChanging(string value);
    partial void OnEnviromentChanged();
    #endregion
		
		public Account()
		{
			this._Servers = new EntitySet<Server>(new Action<Server>(this.attach_Servers), new Action<Server>(this.detach_Servers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnableMonitor", DbType="Bit")]
		public System.Nullable<bool> EnableMonitor
		{
			get
			{
				return this._EnableMonitor;
			}
			set
			{
				if ((this._EnableMonitor != value))
				{
					this.OnEnableMonitorChanging(value);
					this.SendPropertyChanging();
					this._EnableMonitor = value;
					this.SendPropertyChanged("EnableMonitor");
					this.OnEnableMonitorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Missedblocks", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Missedblocks
		{
			get
			{
				return this._Missedblocks;
			}
			set
			{
				if ((this._Missedblocks != value))
				{
					this.OnMissedblocksChanging(value);
					this.SendPropertyChanging();
					this._Missedblocks = value;
					this.SendPropertyChanged("Missedblocks");
					this.OnMissedblocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Producedblocks", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Producedblocks
		{
			get
			{
				return this._Producedblocks;
			}
			set
			{
				if ((this._Producedblocks != value))
				{
					this.OnProducedblocksChanging(value);
					this.SendPropertyChanging();
					this._Producedblocks = value;
					this.SendPropertyChanged("Producedblocks");
					this.OnProducedblocksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Productivity", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Productivity
		{
			get
			{
				return this._Productivity;
			}
			set
			{
				if ((this._Productivity != value))
				{
					this.OnProductivityChanging(value);
					this.SendPropertyChanging();
					this._Productivity = value;
					this.SendPropertyChanged("Productivity");
					this.OnProductivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Int")]
		public System.Nullable<int> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enviroment", DbType="VarChar(50)")]
		public string Enviroment
		{
			get
			{
				return this._Enviroment;
			}
			set
			{
				if ((this._Enviroment != value))
				{
					this.OnEnviromentChanging(value);
					this.SendPropertyChanging();
					this._Enviroment = value;
					this.SendPropertyChanged("Enviroment");
					this.OnEnviromentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Server", Storage="_Servers", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Server> Servers
		{
			get
			{
				return this._Servers;
			}
			set
			{
				this._Servers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Servers")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerID;
		
		private int _AccountID;
		
		private string _ServerName;
		
		private System.Nullable<bool> _isMainServer;
		
		private System.Nullable<bool> _isForging;
		
		private System.Nullable<int> _BlockChainHeight;
		
		private System.Nullable<int> _BlockDiff;
		
		private System.Nullable<int> _BlockChainHeightPeer;
		
		private System.Nullable<bool> _IsEnable;
		
		private string _ServerIP;
		
		private System.Nullable<int> _ServerPort;
		
		private System.Nullable<decimal> _LastBlockMinutsPassedSince;
		
		private System.Nullable<decimal> _LastBlockForgedHeight;
		
		private System.Nullable<bool> _IsRebuilding;
		
		private System.Nullable<System.DateTime> _LastRebuild;
		
		private System.Nullable<bool> _IsChainSynced;
		
		private System.Nullable<bool> _IsChainSyncing;
		
		private string _Error;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerIDChanging(int value);
    partial void OnServerIDChanged();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnServerNameChanging(string value);
    partial void OnServerNameChanged();
    partial void OnisMainServerChanging(System.Nullable<bool> value);
    partial void OnisMainServerChanged();
    partial void OnisForgingChanging(System.Nullable<bool> value);
    partial void OnisForgingChanged();
    partial void OnBlockChainHeightChanging(System.Nullable<int> value);
    partial void OnBlockChainHeightChanged();
    partial void OnBlockDiffChanging(System.Nullable<int> value);
    partial void OnBlockDiffChanged();
    partial void OnBlockChainHeightPeerChanging(System.Nullable<int> value);
    partial void OnBlockChainHeightPeerChanged();
    partial void OnIsEnableChanging(System.Nullable<bool> value);
    partial void OnIsEnableChanged();
    partial void OnServerIPChanging(string value);
    partial void OnServerIPChanged();
    partial void OnServerPortChanging(System.Nullable<int> value);
    partial void OnServerPortChanged();
    partial void OnLastBlockMinutsPassedSinceChanging(System.Nullable<decimal> value);
    partial void OnLastBlockMinutsPassedSinceChanged();
    partial void OnLastBlockForgedHeightChanging(System.Nullable<decimal> value);
    partial void OnLastBlockForgedHeightChanged();
    partial void OnIsRebuildingChanging(System.Nullable<bool> value);
    partial void OnIsRebuildingChanged();
    partial void OnLastRebuildChanging(System.Nullable<System.DateTime> value);
    partial void OnLastRebuildChanged();
    partial void OnIsChainSyncedChanging(System.Nullable<bool> value);
    partial void OnIsChainSyncedChanged();
    partial void OnIsChainSyncingChanging(System.Nullable<bool> value);
    partial void OnIsChainSyncingChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    #endregion
		
		public Server()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerID
		{
			get
			{
				return this._ServerID;
			}
			set
			{
				if ((this._ServerID != value))
				{
					this.OnServerIDChanging(value);
					this.SendPropertyChanging();
					this._ServerID = value;
					this.SendPropertyChanged("ServerID");
					this.OnServerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int NOT NULL")]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerName", DbType="VarChar(50)")]
		public string ServerName
		{
			get
			{
				return this._ServerName;
			}
			set
			{
				if ((this._ServerName != value))
				{
					this.OnServerNameChanging(value);
					this.SendPropertyChanging();
					this._ServerName = value;
					this.SendPropertyChanged("ServerName");
					this.OnServerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMainServer", DbType="Bit")]
		public System.Nullable<bool> isMainServer
		{
			get
			{
				return this._isMainServer;
			}
			set
			{
				if ((this._isMainServer != value))
				{
					this.OnisMainServerChanging(value);
					this.SendPropertyChanging();
					this._isMainServer = value;
					this.SendPropertyChanged("isMainServer");
					this.OnisMainServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isForging", DbType="Bit")]
		public System.Nullable<bool> isForging
		{
			get
			{
				return this._isForging;
			}
			set
			{
				if ((this._isForging != value))
				{
					this.OnisForgingChanging(value);
					this.SendPropertyChanging();
					this._isForging = value;
					this.SendPropertyChanged("isForging");
					this.OnisForgingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockChainHeight", DbType="Int")]
		public System.Nullable<int> BlockChainHeight
		{
			get
			{
				return this._BlockChainHeight;
			}
			set
			{
				if ((this._BlockChainHeight != value))
				{
					this.OnBlockChainHeightChanging(value);
					this.SendPropertyChanging();
					this._BlockChainHeight = value;
					this.SendPropertyChanged("BlockChainHeight");
					this.OnBlockChainHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockDiff", DbType="Int")]
		public System.Nullable<int> BlockDiff
		{
			get
			{
				return this._BlockDiff;
			}
			set
			{
				if ((this._BlockDiff != value))
				{
					this.OnBlockDiffChanging(value);
					this.SendPropertyChanging();
					this._BlockDiff = value;
					this.SendPropertyChanged("BlockDiff");
					this.OnBlockDiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlockChainHeightPeer", DbType="Int")]
		public System.Nullable<int> BlockChainHeightPeer
		{
			get
			{
				return this._BlockChainHeightPeer;
			}
			set
			{
				if ((this._BlockChainHeightPeer != value))
				{
					this.OnBlockChainHeightPeerChanging(value);
					this.SendPropertyChanging();
					this._BlockChainHeightPeer = value;
					this.SendPropertyChanged("BlockChainHeightPeer");
					this.OnBlockChainHeightPeerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnable", DbType="Bit")]
		public System.Nullable<bool> IsEnable
		{
			get
			{
				return this._IsEnable;
			}
			set
			{
				if ((this._IsEnable != value))
				{
					this.OnIsEnableChanging(value);
					this.SendPropertyChanging();
					this._IsEnable = value;
					this.SendPropertyChanged("IsEnable");
					this.OnIsEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerIP", DbType="VarChar(50)")]
		public string ServerIP
		{
			get
			{
				return this._ServerIP;
			}
			set
			{
				if ((this._ServerIP != value))
				{
					this.OnServerIPChanging(value);
					this.SendPropertyChanging();
					this._ServerIP = value;
					this.SendPropertyChanged("ServerIP");
					this.OnServerIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerPort", DbType="Int")]
		public System.Nullable<int> ServerPort
		{
			get
			{
				return this._ServerPort;
			}
			set
			{
				if ((this._ServerPort != value))
				{
					this.OnServerPortChanging(value);
					this.SendPropertyChanging();
					this._ServerPort = value;
					this.SendPropertyChanged("ServerPort");
					this.OnServerPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastBlockMinutsPassedSince", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> LastBlockMinutsPassedSince
		{
			get
			{
				return this._LastBlockMinutsPassedSince;
			}
			set
			{
				if ((this._LastBlockMinutsPassedSince != value))
				{
					this.OnLastBlockMinutsPassedSinceChanging(value);
					this.SendPropertyChanging();
					this._LastBlockMinutsPassedSince = value;
					this.SendPropertyChanged("LastBlockMinutsPassedSince");
					this.OnLastBlockMinutsPassedSinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastBlockForgedHeight", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> LastBlockForgedHeight
		{
			get
			{
				return this._LastBlockForgedHeight;
			}
			set
			{
				if ((this._LastBlockForgedHeight != value))
				{
					this.OnLastBlockForgedHeightChanging(value);
					this.SendPropertyChanging();
					this._LastBlockForgedHeight = value;
					this.SendPropertyChanged("LastBlockForgedHeight");
					this.OnLastBlockForgedHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRebuilding", DbType="Bit")]
		public System.Nullable<bool> IsRebuilding
		{
			get
			{
				return this._IsRebuilding;
			}
			set
			{
				if ((this._IsRebuilding != value))
				{
					this.OnIsRebuildingChanging(value);
					this.SendPropertyChanging();
					this._IsRebuilding = value;
					this.SendPropertyChanged("IsRebuilding");
					this.OnIsRebuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRebuild", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastRebuild
		{
			get
			{
				return this._LastRebuild;
			}
			set
			{
				if ((this._LastRebuild != value))
				{
					this.OnLastRebuildChanging(value);
					this.SendPropertyChanging();
					this._LastRebuild = value;
					this.SendPropertyChanged("LastRebuild");
					this.OnLastRebuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChainSynced", DbType="Bit")]
		public System.Nullable<bool> IsChainSynced
		{
			get
			{
				return this._IsChainSynced;
			}
			set
			{
				if ((this._IsChainSynced != value))
				{
					this.OnIsChainSyncedChanging(value);
					this.SendPropertyChanging();
					this._IsChainSynced = value;
					this.SendPropertyChanged("IsChainSynced");
					this.OnIsChainSyncedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChainSyncing", DbType="Bit")]
		public System.Nullable<bool> IsChainSyncing
		{
			get
			{
				return this._IsChainSyncing;
			}
			set
			{
				if ((this._IsChainSyncing != value))
				{
					this.OnIsChainSyncingChanging(value);
					this.SendPropertyChanging();
					this._IsChainSyncing = value;
					this.SendPropertyChanged("IsChainSyncing");
					this.OnIsChainSyncingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="VarChar(MAX)")]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Server", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Servers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Servers.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
